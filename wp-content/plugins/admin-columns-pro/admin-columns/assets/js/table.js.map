{"version":3,"file":"table.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;ACrBA,aAAa,mBAAO,CAAC,sEAAoB;AACzC,iBAAiB,mBAAO,CAAC,wDAAY;AACrC,aAAa,mBAAO,CAAC,kDAAQ;;AAE7B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0CAA0C,SAAS;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;;;;;;;;;;;ACjKA,aAAa,mBAAO,CAAC,kDAAQ;;AAE7B;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;;;;ACtDA,gBAAgB,mBAAO,CAAC,4DAAe;AACvC,aAAa,mBAAO,CAAC,kDAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,YAAY;AACpB;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;AC/CY;;AAEZ;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;AC1BO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjBgD;AACzC;AACP;AACA,iCAAiC,4DAAU;AAC3C;AACA;AACA;;;;;;;;;;;;;;;;;;;ACN2C;AACpC;AACP;AACA;AACO;AACP;AACA;AACO;AACP,WAAW,4DAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACfO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA,uEAAuE,UAAU,GAAG,IAAI;AACxF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1BO;AACP;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5E2C;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wDAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,0CAA0C,YAAY;AACtD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/CiC;AACjC,UAAU,mBAAO,CAAC,sBAAQ;AACnB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL,QAAQ,iDAAO;AACf;;;;;;;;;;;;;;;;;;;ACnJ8B;AACiB;AAChC;AACf;AACA;AACA,0BAA0B,gDAAO;AACjC,iBAAiB,uDAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxBe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5D4B;AACb;AACf;AACA;AACA;AACA;AACA,mBAAmB,8CAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;AC7Ce;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACbkD;AAClD,UAAU,mBAAO,CAAC,sBAAQ;AACX;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;AC1FmD;AACnD;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAc;AACtB;AACA;AACA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;ACTjB;AACP;AACA;AACA,KAAK;AACL;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7CO;AACP;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnCkD;AAClD,cAAc,mBAAO,CAAC,gDAAS;AAChB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,8DAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChC8B;AACf;AACf;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtDe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1Ce;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7D4C;AACrC;AACP;AACA;AACA,gBAAgB,oDAAO;AACvB,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;ACPe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtCoD;AACrC;AACf;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,oEAAoB;AACpE;AACA,SAAS;AACT;AACA;AACA,0DAA0D,KAAK;AAC/D;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChBgC;AACJ;AACI;AACN;AACiB;AACU;AACP;AACc;AAC7C;AACf;AACA;AACA;AACA,4BAA4B,kEAAgB;AAC5C,2BAA2B,gDAAO;AAClC,yBAAyB,8CAAK;AAC9B,yEAAyE,gDAAO;AAChF,6BAA6B,sDAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAiB;AACzC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mEAAmE,UAAU,eAAe;AAC5F,kCAAkC,kEAA0B,IAAI,aAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,iEAAiB;AAClC;AACA;AACA;AACA;AACA,iBAAiB,iEAAiB;AAClC;AACA;AACA;AACA;AACA,+BAA+B,6CAAI;AACnC;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;ACjEA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;ACNkC;AACO;AACyB;AACZ;AACtD;AACuB;AACkC;AACC;AACb;AAC+B;AACnB;AACnB;AACc;AACpD,kBAAkB,sEAAc;AAChC,0CAA0C,wDAAM;AAChD;AACA,gBAAgB,sEAAsB;AACtC,IAAI,kEAAY;AAChB;AACA,gCAAgC,oDAAK;AACrC;AACA,gEAAgE,qEAAoB;AACpF;AACA,gDAAgD,yDAAO;AACvD;AACA,YAAY,gEAAa;AACzB,KAAK;AACL,IAAI,6CAAC;AACL;AACA,QAAQ,sEAAmB;AAC3B,KAAK;AACL,CAAC;AACD,wBAAwB,kEAA0B;AAClD,IAAI,sEAAmB;AACvB,IAAI,uEAAqB;AACzB;AACA;AACA;AACA;AACA,oBAAoB,6CAAC,4BAA4B,IAAI,iEAAiB,mBAAmB;AACzF;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL,iDAAiD,gCAAgC;AACjF;AACA;AACA,YAAY,sEAAmB;AAC/B,SAAS;AACT,KAAK;AACL,CAAC","sources":["webpack://admincolumns/./node_modules/nanoassert/index.js","webpack://admincolumns/./node_modules/nanobus/index.js","webpack://admincolumns/./node_modules/nanoscheduler/index.js","webpack://admincolumns/./node_modules/nanotiming/browser.js","webpack://admincolumns/./node_modules/remove-array-items/index.js","webpack://admincolumns/./js/constants.ts","webpack://admincolumns/./js/helpers/admin-columns.ts","webpack://admincolumns/./js/helpers/elements.ts","webpack://admincolumns/./js/helpers/global.ts","webpack://admincolumns/./js/helpers/html-element.ts","webpack://admincolumns/./js/helpers/table.ts","webpack://admincolumns/./js/modules/ac-pointer.ts","webpack://admincolumns/./js/modules/ac-services.ts","webpack://admincolumns/./js/modules/modal.ts","webpack://admincolumns/./js/modules/modals.ts","webpack://admincolumns/./js/modules/service-container.ts","webpack://admincolumns/./js/modules/toggle-box-link.ts","webpack://admincolumns/./js/modules/tooltips.ts","webpack://admincolumns/./js/plugin/show-more.ts","webpack://admincolumns/./js/plugin/tooltip.ts","webpack://admincolumns/./js/table/actions.ts","webpack://admincolumns/./js/table/cell.ts","webpack://admincolumns/./js/table/cells.ts","webpack://admincolumns/./js/table/columns.ts","webpack://admincolumns/./js/table/functions.ts","webpack://admincolumns/./js/table/row-selection.ts","webpack://admincolumns/./js/table/screen-options-columns.ts","webpack://admincolumns/./js/table/table.ts","webpack://admincolumns/external var \"jQuery\"","webpack://admincolumns/webpack/bootstrap","webpack://admincolumns/webpack/runtime/compat get default export","webpack://admincolumns/webpack/runtime/define property getters","webpack://admincolumns/webpack/runtime/hasOwnProperty shorthand","webpack://admincolumns/webpack/runtime/make namespace object","webpack://admincolumns/./js/table.ts"],"sourcesContent":["assert.notEqual = notEqual\nassert.notOk = notOk\nassert.equal = equal\nassert.ok = assert\n\nmodule.exports = assert\n\nfunction equal (a, b, m) {\n  assert(a == b, m) // eslint-disable-line eqeqeq\n}\n\nfunction notEqual (a, b, m) {\n  assert(a != b, m) // eslint-disable-line eqeqeq\n}\n\nfunction notOk (t, m) {\n  assert(!t, m)\n}\n\nfunction assert (t, m) {\n  if (!t) throw new Error(m || 'AssertionError')\n}\n","var splice = require('remove-array-items')\nvar nanotiming = require('nanotiming')\nvar assert = require('assert')\n\nmodule.exports = Nanobus\n\nfunction Nanobus (name) {\n  if (!(this instanceof Nanobus)) return new Nanobus(name)\n\n  this._name = name || 'nanobus'\n  this._starListeners = []\n  this._listeners = {}\n}\n\nNanobus.prototype.emit = function (eventName) {\n  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.emit: eventName should be type string or symbol')\n\n  var data = []\n  for (var i = 1, len = arguments.length; i < len; i++) {\n    data.push(arguments[i])\n  }\n\n  var emitTiming = nanotiming(this._name + \"('\" + eventName.toString() + \"')\")\n  var listeners = this._listeners[eventName]\n  if (listeners && listeners.length > 0) {\n    this._emit(this._listeners[eventName], data)\n  }\n\n  if (this._starListeners.length > 0) {\n    this._emit(this._starListeners, eventName, data, emitTiming.uuid)\n  }\n  emitTiming()\n\n  return this\n}\n\nNanobus.prototype.on = Nanobus.prototype.addListener = function (eventName, listener) {\n  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.on: eventName should be type string or symbol')\n  assert.equal(typeof listener, 'function', 'nanobus.on: listener should be type function')\n\n  if (eventName === '*') {\n    this._starListeners.push(listener)\n  } else {\n    if (!this._listeners[eventName]) this._listeners[eventName] = []\n    this._listeners[eventName].push(listener)\n  }\n  return this\n}\n\nNanobus.prototype.prependListener = function (eventName, listener) {\n  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.prependListener: eventName should be type string or symbol')\n  assert.equal(typeof listener, 'function', 'nanobus.prependListener: listener should be type function')\n\n  if (eventName === '*') {\n    this._starListeners.unshift(listener)\n  } else {\n    if (!this._listeners[eventName]) this._listeners[eventName] = []\n    this._listeners[eventName].unshift(listener)\n  }\n  return this\n}\n\nNanobus.prototype.once = function (eventName, listener) {\n  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.once: eventName should be type string or symbol')\n  assert.equal(typeof listener, 'function', 'nanobus.once: listener should be type function')\n\n  var self = this\n  this.on(eventName, once)\n  function once () {\n    listener.apply(self, arguments)\n    self.removeListener(eventName, once)\n  }\n  return this\n}\n\nNanobus.prototype.prependOnceListener = function (eventName, listener) {\n  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.prependOnceListener: eventName should be type string or symbol')\n  assert.equal(typeof listener, 'function', 'nanobus.prependOnceListener: listener should be type function')\n\n  var self = this\n  this.prependListener(eventName, once)\n  function once () {\n    listener.apply(self, arguments)\n    self.removeListener(eventName, once)\n  }\n  return this\n}\n\nNanobus.prototype.removeListener = function (eventName, listener) {\n  assert.ok(typeof eventName === 'string' || typeof eventName === 'symbol', 'nanobus.removeListener: eventName should be type string or symbol')\n  assert.equal(typeof listener, 'function', 'nanobus.removeListener: listener should be type function')\n\n  if (eventName === '*') {\n    this._starListeners = this._starListeners.slice()\n    return remove(this._starListeners, listener)\n  } else {\n    if (typeof this._listeners[eventName] !== 'undefined') {\n      this._listeners[eventName] = this._listeners[eventName].slice()\n    }\n\n    return remove(this._listeners[eventName], listener)\n  }\n\n  function remove (arr, listener) {\n    if (!arr) return\n    var index = arr.indexOf(listener)\n    if (index !== -1) {\n      splice(arr, index, 1)\n      return true\n    }\n  }\n}\n\nNanobus.prototype.removeAllListeners = function (eventName) {\n  if (eventName) {\n    if (eventName === '*') {\n      this._starListeners = []\n    } else {\n      this._listeners[eventName] = []\n    }\n  } else {\n    this._starListeners = []\n    this._listeners = {}\n  }\n  return this\n}\n\nNanobus.prototype.listeners = function (eventName) {\n  var listeners = eventName !== '*'\n    ? this._listeners[eventName]\n    : this._starListeners\n\n  var ret = []\n  if (listeners) {\n    var ilength = listeners.length\n    for (var i = 0; i < ilength; i++) ret.push(listeners[i])\n  }\n  return ret\n}\n\nNanobus.prototype._emit = function (arr, eventName, data, uuid) {\n  if (typeof arr === 'undefined') return\n  if (arr.length === 0) return\n  if (data === undefined) {\n    data = eventName\n    eventName = null\n  }\n\n  if (eventName) {\n    if (uuid !== undefined) {\n      data = [eventName].concat(data, uuid)\n    } else {\n      data = [eventName].concat(data)\n    }\n  }\n\n  var length = arr.length\n  for (var i = 0; i < length; i++) {\n    var listener = arr[i]\n    listener.apply(listener, data)\n  }\n}\n","var assert = require('assert')\n\nvar hasWindow = typeof window !== 'undefined'\n\nfunction createScheduler () {\n  var scheduler\n  if (hasWindow) {\n    if (!window._nanoScheduler) window._nanoScheduler = new NanoScheduler(true)\n    scheduler = window._nanoScheduler\n  } else {\n    scheduler = new NanoScheduler()\n  }\n  return scheduler\n}\n\nfunction NanoScheduler (hasWindow) {\n  this.hasWindow = hasWindow\n  this.hasIdle = this.hasWindow && window.requestIdleCallback\n  this.method = this.hasIdle ? window.requestIdleCallback.bind(window) : this.setTimeout\n  this.scheduled = false\n  this.queue = []\n}\n\nNanoScheduler.prototype.push = function (cb) {\n  assert.equal(typeof cb, 'function', 'nanoscheduler.push: cb should be type function')\n\n  this.queue.push(cb)\n  this.schedule()\n}\n\nNanoScheduler.prototype.schedule = function () {\n  if (this.scheduled) return\n\n  this.scheduled = true\n  var self = this\n  this.method(function (idleDeadline) {\n    var cb\n    while (self.queue.length && idleDeadline.timeRemaining() > 0) {\n      cb = self.queue.shift()\n      cb(idleDeadline)\n    }\n    self.scheduled = false\n    if (self.queue.length) self.schedule()\n  })\n}\n\nNanoScheduler.prototype.setTimeout = function (cb) {\n  setTimeout(cb, 0, {\n    timeRemaining: function () {\n      return 1\n    }\n  })\n}\n\nmodule.exports = createScheduler\n","var scheduler = require('nanoscheduler')()\nvar assert = require('assert')\n\nvar perf\nnanotiming.disabled = true\ntry {\n  perf = window.performance\n  nanotiming.disabled = window.localStorage.DISABLE_NANOTIMING === 'true' || !perf.mark\n} catch (e) { }\n\nmodule.exports = nanotiming\n\nfunction nanotiming (name) {\n  assert.equal(typeof name, 'string', 'nanotiming: name should be type string')\n\n  if (nanotiming.disabled) return noop\n\n  var uuid = (perf.now() * 10000).toFixed() % Number.MAX_SAFE_INTEGER\n  var startName = 'start-' + uuid + '-' + name\n  perf.mark(startName)\n\n  function end (cb) {\n    var endName = 'end-' + uuid + '-' + name\n    perf.mark(endName)\n\n    scheduler.push(function () {\n      var err = null\n      try {\n        var measureName = name + ' [' + uuid + ']'\n        perf.measure(measureName, startName, endName)\n        perf.clearMarks(startName)\n        perf.clearMarks(endName)\n      } catch (e) { err = e }\n      if (cb) cb(err, name)\n    })\n  }\n\n  end.uuid = uuid\n  return end\n}\n\nfunction noop (cb) {\n  if (cb) {\n    scheduler.push(function () {\n      cb(new Error('nanotiming: performance API unavailable'))\n    })\n  }\n}\n","'use strict'\n\n/**\n * Remove a range of items from an array\n *\n * @function removeItems\n * @param {Array<*>} arr The target array\n * @param {number} startIdx The index to begin removing from (inclusive)\n * @param {number} removeCount How many items to remove\n */\nmodule.exports = function removeItems (arr, startIdx, removeCount) {\n  var i, length = arr.length\n\n  if (startIdx >= length || removeCount === 0) {\n    return\n  }\n\n  removeCount = (startIdx + removeCount > length ? length - startIdx : removeCount)\n\n  var len = length - removeCount\n\n  for (i = startIdx; i < len; ++i) {\n    arr[i] = arr[i + removeCount]\n  }\n\n  arr.length = len\n}\n","export const EventConstants = {\n    TABLE: {\n        READY: 'Table.Ready'\n    },\n    SETTINGS: {\n        FORM: {\n            LOADED: 'Settings.Form.Loaded',\n            READY: 'Settings.Form.Ready',\n            SAVING: 'Settings.Form.Saving',\n            SAVED: 'Settings.Form.Saved'\n        },\n        COLUMN: {\n            INIT: 'Settings.Column.Init',\n            SWITCH: 'Settings.Column.SwitchToType',\n            REFRESHED: 'Settings.Column.Refreshed'\n        }\n    }\n};\n","import AcServices from \"../modules/ac-services\";\nexport const initAcServices = () => {\n    if (!window.AC_SERVICES) {\n        window.AC_SERVICES = new AcServices();\n    }\n    return window.AC_SERVICES;\n};\n","import AcHtmlElement from \"./html-element\";\nexport const insertAfter = (newNode, referenceNode) => {\n    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n};\nexport const insertBefore = (newNode, referenceNode) => {\n    referenceNode.parentNode.insertBefore(newNode, referenceNode);\n};\nexport const createElementFromString = (content, baseElement = 'div') => {\n    return AcHtmlElement.create(baseElement).addHtml(content).element;\n};\nfunction isInViewport(element) {\n    var rect = element.getBoundingClientRect();\n    return (rect.top >= 0 && rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth));\n}\n","export const getParamFromUrl = (param, url) => {\n    if (!url.includes('?')) {\n        return null;\n    }\n    const params = new URLSearchParams(url.split('?')[1]);\n    return params.get(param);\n};\nexport const mapDataToFormData = (data, formData = null) => {\n    if (!formData) {\n        formData = new FormData();\n    }\n    Object.keys(data).forEach(key => {\n        appendObjectToFormData(formData, data[key], key);\n    });\n    return formData;\n};\nexport const appendObjectToFormData = (formData, data, parentKey = null) => {\n    if (data && typeof data === 'object' && !(data instanceof Date) && !(data instanceof File)) {\n        Object.keys(data).forEach(key => {\n            appendObjectToFormData(formData, data[key], parentKey ? `${parentKey}[${key}]` : key);\n        });\n    }\n    else {\n        const value = data == null ? '' : data;\n        formData.append(parentKey, value);\n    }\n};\n","export const AcEl = (el) => {\n    return AcHtmlElement.create(el);\n};\nexport default class AcHtmlElement {\n    constructor(el) {\n        this.element = el instanceof HTMLElement ? el : document.createElement(el);\n    }\n    static create(el) {\n        return new AcHtmlElement(el);\n    }\n    addId(id) {\n        this.element.id = id;\n        return this;\n    }\n    addClass(className) {\n        this.element.classList.add(className);\n        return this;\n    }\n    addClasses(...classNames) {\n        classNames.forEach(className => this.addClass(className));\n        return this;\n    }\n    setAttribute(name, value) {\n        this.element.setAttribute(name, value);\n        return this;\n    }\n    setAttributes(attributes) {\n        Object.keys(attributes).forEach(k => this.setAttribute(k, attributes[k]));\n        return this;\n    }\n    addHtml(html) {\n        this.element.innerHTML = html;\n        return this;\n    }\n    append(element) {\n        this.element.appendChild(element);\n        return this;\n    }\n    css(property, value) {\n        this.element.style[property] = value;\n        return this;\n    }\n    insertAfter(insertedElement) {\n        try {\n            this.element.parentElement.insertBefore(insertedElement, this.element.nextElementSibling);\n        }\n        catch (e) {\n            console.error(\"Not able to insert element after current node\", this.element);\n        }\n    }\n    insertSelfBefore(referenceNode) {\n        try {\n            referenceNode.parentElement.insertBefore(this.element, referenceNode);\n        }\n        catch (e) {\n            console.error(\"Not able to insert element before current node\", this.element);\n        }\n        return this;\n    }\n    insertBefore(insertedElement) {\n        try {\n            this.element.parentElement.insertBefore(insertedElement, this.element);\n        }\n        catch (e) {\n            console.error(\"Not able to insert element before current node\", this.element);\n        }\n        return this;\n    }\n    addEventListener(event, listener) {\n        this.element.addEventListener(event, listener);\n        return this;\n    }\n    addEventListeners(events, listener) {\n        events.forEach(e => this.addEventListener(e, listener));\n        return this;\n    }\n}\n","import { getParamFromUrl } from \"./global\";\nexport const getIdFromTableRow = (row) => {\n    if (row.classList.contains('no-items')) {\n        return 0;\n    }\n    let item_id = getIdFromString(row.id);\n    if (!item_id) {\n        let input = row.querySelector('.check-column input[type=checkbox]');\n        if (input) {\n            item_id = getIdFromString(input.id);\n        }\n    }\n    // Try to get the ID from the edit URL (MS Sites)\n    if (!item_id) {\n        let link = row.parentElement.querySelector('.edit a');\n        if (link) {\n            let href = link.getAttribute('href');\n            if (href) {\n                item_id = parseInt(getParamFromUrl('id', href));\n            }\n        }\n    }\n    row.dataset.id = item_id.toString();\n    return item_id;\n};\nexport const getIdFromString = (value) => {\n    let id_parts = value.split(/[_,\\-]+/);\n    return parseInt(id_parts[id_parts.length - 1]);\n};\nexport const getRowCellByName = (row, column_name) => {\n    return row.querySelector(`td.column-${column_name}`);\n};\nexport const resolveTableBySelector = (selector) => {\n    let table = document.querySelector(selector);\n    if (!table) {\n        return null;\n    }\n    if (table.tagName === 'TABLE') {\n        return table;\n    }\n    if (table.tagName === 'TBODY') {\n        return table.closest('table');\n    }\n    if (table.querySelector('table.wp-list-table')) {\n        return table.querySelector('table.wp-list-table');\n    }\n    return null;\n};\n","import Tooltip from \"./tooltips\";\nconst $ = require(\"jquery\");\nexport class Pointer {\n    constructor(el) {\n        this.element = el;\n        this.settings = this.getDefaults();\n        this.init();\n        this.setInitialized();\n    }\n    setInitialized() {\n        AcPointers.add(this.element);\n    }\n    getDefaults() {\n        return {\n            width: this.element.getAttribute('data-width') ? this.element.getAttribute('data-width') : 250,\n            noclick: this.element.getAttribute('data-noclick') ? this.element.getAttribute('data-noclick') : false,\n            position: this.getPosition()\n        };\n    }\n    isInitialized() {\n        return AcPointers.isInitialized(this.element);\n    }\n    init() {\n        if (this.isInitialized()) {\n            return;\n        }\n        // create pointer\n        $(this.element).pointer({\n            content: this.getRelatedHTML(),\n            position: this.settings.position,\n            pointerWidth: this.settings.width,\n            pointerClass: this.getPointerClass()\n        });\n        this.initEvents();\n    }\n    getPosition() {\n        let position = {\n            at: 'left top',\n            my: 'right top',\n            edge: 'right', // position of arrow\n        };\n        let pos = this.element.getAttribute('data-pos');\n        let edge = this.element.getAttribute('data-pos_edge');\n        if ('right' === pos) {\n            position = {\n                at: 'right middle',\n                my: 'left middle',\n                edge: 'left'\n            };\n        }\n        if ('right_bottom' === pos) {\n            position = {\n                at: 'right middle',\n                my: 'left bottom',\n                edge: 'none'\n            };\n        }\n        if ('left' === pos) {\n            position = {\n                at: 'left middle',\n                my: 'right middle',\n                edge: 'right'\n            };\n        }\n        if (edge) {\n            position.edge = edge;\n        }\n        return position;\n    }\n    getPointerClass() {\n        let classes = [\n            'ac-wp-pointer',\n            'wp-pointer',\n            'wp-pointer-' + this.settings.position.edge\n        ];\n        if (this.settings.noclick) {\n            classes.push('noclick');\n        }\n        return classes.join(' ');\n    }\n    getRelatedHTML() {\n        let related_element = document.getElementById(this.element.getAttribute('rel'));\n        return related_element ? related_element.innerHTML : '';\n    }\n    initEvents() {\n        let el = $(this.element);\n        // click\n        if (!this.settings.noclick) {\n            el.click(function () {\n                if (el.hasClass('open')) {\n                    el.removeClass('open');\n                }\n                else {\n                    el.addClass('open');\n                }\n            });\n        }\n        el.click(function () {\n            el.pointer('open');\n        });\n        el.mouseenter(function () {\n            el.pointer('open');\n            setTimeout(() => {\n                el.pointer('open');\n            }, 2);\n        });\n        el.mouseleave(function () {\n            setTimeout(() => {\n                if (!el.hasClass('open') && $('.ac-wp-pointer.hover').length === 0) {\n                    el.pointer('close');\n                }\n            }, 1);\n        });\n        el.on('close', () => {\n            setTimeout(() => {\n                if (!el.hasClass('open')) {\n                    el.pointer('close');\n                }\n            });\n        });\n    }\n}\nclass AcPointers {\n    static isInitialized(element) {\n        return this.initElements.filter(el => el === element).length > 0;\n    }\n    static add(element) {\n        this.initElements.push(element);\n    }\n}\nAcPointers.initElements = [];\nexport const initPointers = (elements = null) => {\n    if (!elements) {\n        elements = document.querySelectorAll('.ac-pointer');\n    }\n    elements.forEach(element => {\n        new Pointer(element);\n    });\n    $('.ac-wp-pointer').hover(function () {\n        $(this).addClass('hover');\n    }, function () {\n        $(this).removeClass('hover');\n        $('.ac-pointer').trigger('close');\n    }).on('click', '.close', function () {\n        $('.ac-pointer').removeClass('open');\n    });\n    new Tooltip();\n};\n","import Nanobus from \"nanobus\";\nimport { AcEl } from \"../helpers/html-element\";\nexport default class AcServices {\n    constructor() {\n        this.services = {};\n        this.events = new Nanobus();\n        this.$ = AcEl;\n    }\n    registerService(name, service) {\n        this.services[name] = service;\n        return this;\n    }\n    getService(name) {\n        return this.hasService(name) ? this.services[name] : null;\n    }\n    hasService(name) {\n        return this.services.hasOwnProperty(name);\n    }\n    addListener(name, callback) {\n        this.events.addListener(name, callback);\n    }\n    emitEvent(name, args) {\n        this.events.emit(name, args);\n    }\n}\n","export default class Modal {\n    constructor(el) {\n        if (!el) {\n            return;\n        }\n        this.el = el;\n        this.dialog = el.querySelector('.ac-modal__dialog');\n        this.initEvents();\n    }\n    getElement() {\n        return this.el;\n    }\n    initEvents() {\n        let self = this;\n        document.addEventListener('keydown', (e) => {\n            const keyName = e.key;\n            if (!this.isOpen()) {\n                return;\n            }\n            if ('Escape' === keyName) {\n                this.close();\n            }\n        });\n        let dismissButtons = this.el.querySelectorAll('[data-dismiss=\"modal\"], .ac-modal__dialog__close');\n        if (dismissButtons.length > 0) {\n            dismissButtons.forEach((b) => {\n                b.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    self.close();\n                });\n            });\n        }\n        this.el.addEventListener('click', (e) => {\n            if (e.target.classList.contains('ac-modal')) {\n                self.close();\n            }\n        });\n    }\n    isOpen() {\n        return this.el.classList.contains('-active');\n    }\n    close() {\n        this.onClose();\n        this.el.classList.remove('-active');\n    }\n    open() {\n        //short delay in order to allow bubbling events to bind before opening\n        setTimeout(() => {\n            this.onOpen();\n            this.el.removeAttribute('style');\n            this.el.classList.add('-active');\n        });\n    }\n    destroy() {\n        this.el.remove();\n    }\n    onClose() {\n    }\n    onOpen() {\n    }\n}\n","import Modal from './modal';\nexport default class Modals {\n    constructor() {\n        this.modals = {};\n        this.number = 0;\n        this.defaults = {\n            modal: Modal\n        };\n        this.initGlobalEvents();\n    }\n    register(modal, key = '') {\n        if (!key) {\n            key = 'm' + this.number;\n        }\n        this.modals[key] = modal;\n        this.number++;\n        return modal;\n    }\n    get(key) {\n        return this.modals.hasOwnProperty(key) ? this.modals[key] : null;\n    }\n    open(key) {\n        if (this.get(key)) {\n            this.get(key).open();\n        }\n    }\n    close(key) {\n        if (this.get(key)) {\n            this.get(key).close();\n        }\n    }\n    closeAll() {\n        for (let key in this.modals) {\n            this.close(key);\n        }\n    }\n    initGlobalEvents() {\n        document.addEventListener('click', (e) => {\n            let target = e.target;\n            if (target.dataset.acModal) {\n                e.preventDefault();\n                this.open(target.dataset.acModal);\n            }\n        });\n    }\n}\n","export default class ServiceContainer {\n    constructor() {\n        this.services = {};\n    }\n    setService(name, service) {\n        this.services[name] = service;\n    }\n    getService(name) {\n        return this.hasService(name) ? this.services[name] : null;\n    }\n    hasService(name) {\n        return this.services.hasOwnProperty(name);\n    }\n}\n","import { insertAfter } from \"../helpers/elements\";\nconst $ = require(\"jquery\");\nexport default class ToggleBoxLink {\n    constructor(element) {\n        this.element = element;\n        this.initEvents();\n        this.contentBox = this.element.parentElement.querySelector('.ac-toggle-box-contents');\n        if (!this.contentBox) {\n            this.createContenBox();\n        }\n    }\n    isAjax() {\n        return parseInt(this.element.dataset.ajaxPopulate) === 1;\n    }\n    isInited() {\n        return this.element.dataset.toggleBoxInit;\n    }\n    createContenBox() {\n        let contentBox = document.createElement('div');\n        contentBox.classList.add('ac-toggle-box-contents');\n        insertAfter(contentBox, this.element);\n        this.contentBox = contentBox;\n        return this.contentBox;\n    }\n    initEvents() {\n        if (this.isInited()) {\n            return;\n        }\n        this.element.addEventListener('click', (e) => {\n            e.preventDefault();\n            if (this.isAjax() && !this.hasContent()) {\n                this.manageAjaxValue();\n            }\n            this.toggleContentBox();\n        });\n        this.element.dataset.toggleBoxInit = 'true';\n    }\n    hasContent() {\n        return this.getContentBox().innerHTML.length > 0;\n    }\n    setContent(content) {\n        this.getContentBox().innerHTML = content;\n    }\n    getContentBox() {\n        if (!this.contentBox) {\n            return this.createContenBox();\n        }\n        return this.contentBox;\n    }\n    setLabel(open) {\n        let label = this.element.dataset.label;\n        if (open && this.element.dataset.labelClose) {\n            label = this.element.dataset.labelClose;\n        }\n        this.element.innerHTML = label + '<span class=\"spinner\"></span>';\n    }\n    toggleContentBox() {\n        if (this.getContentBox().classList.contains('-open')) {\n            this.getContentBox().classList.remove('-open');\n            this.setLabel(false);\n        }\n        else {\n            this.getContentBox().classList.add('-open');\n            this.setLabel(true);\n        }\n    }\n    manageAjaxValue() {\n        this.element.classList.add('loading');\n        this.retrieveAjaxValue().done((response) => {\n            this.setContent(response);\n            $(this.element.parentElement).trigger('ajax_column_value_ready');\n            AC_SERVICES.getService('Tooltips').init();\n        }).always(() => {\n            this.element.classList.remove('loading');\n        });\n    }\n    retrieveAjaxValue() {\n        return $.ajax({\n            url: ajaxurl,\n            method: 'POST',\n            data: {\n                action: 'ac_get_column_value',\n                list_screen: AC.list_screen,\n                layout: AC.layout,\n                column: this.element.dataset.column,\n                pk: this.element.dataset.itemId,\n                _ajax_nonce: AC.ajax_nonce\n            }\n        });\n    }\n}\n","import { initAcTooltips } from \"../plugin/tooltip\";\nclass Tooltips {\n    constructor() {\n        this.init();\n    }\n    init() {\n        initAcTooltips();\n    }\n}\nexport default Tooltips;\n","export const auto_init_show_more = () => {\n    document.querySelectorAll('.ac-show-more').forEach((el) => {\n        new ShowMore(el);\n    });\n};\nexport default class ShowMore {\n    constructor(el) {\n        this.element = el;\n        this.initEvents();\n    }\n    initEvents() {\n        if (this.isInited()) {\n            return;\n        }\n        if (this.getToggler()) {\n            this.getToggler().addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                this.toggle();\n            });\n        }\n        this.element.dataset.showMoreInit = 'true';\n    }\n    getToggler() {\n        return this.element.querySelector('.ac-show-more__toggle');\n    }\n    isInited() {\n        return this.element.dataset.showMoreInit === 'true';\n    }\n    toggle() {\n        if (this.element.classList.contains('-on')) {\n            this.hide();\n        }\n        else {\n            this.show();\n        }\n    }\n    show() {\n        this.element.classList.add('-on');\n        this.getToggler().innerHTML = this.getToggler().dataset.less;\n    }\n    hide() {\n        this.element.classList.remove('-on');\n        this.getToggler().innerHTML = this.getToggler().dataset.more;\n    }\n}\n","export const initAcTooltips = () => {\n    document.querySelectorAll('[data-ac-tip]').forEach((element) => {\n        new Tooltip(element);\n    });\n};\nexport class Tooltip {\n    constructor(el, content = '') {\n        this.element = el;\n        this.content = content ? content : el.dataset.acTip;\n        this.tip = createTooltip(this.content);\n        this.initEvents();\n    }\n    initEvents() {\n        if (this.element.dataset.acTooltipInit === '1') {\n            return;\n        }\n        this.element.dataset.acTooltipInit = '1';\n        document.body.appendChild(this.tip);\n        this.element.addEventListener('mouseenter', () => {\n            const bodyOffset = document.body.getBoundingClientRect();\n            const viewportOffset = this.element.getBoundingClientRect();\n            this.tip.style.left = ((viewportOffset.left - bodyOffset.left) + this.element.offsetWidth / 2) + 'px';\n            this.tip.style.top = ((viewportOffset.top - bodyOffset.top) + this.element.offsetHeight) + 'px';\n            this.tip.classList.add('hover');\n        });\n        this.element.addEventListener('mouseleave', () => {\n            this.tip.classList.remove('hover');\n        });\n    }\n}\nconst createTooltip = (content) => {\n    let tip = document.createElement('div');\n    tip.classList.add('ac-tooltip');\n    tip.innerHTML = content;\n    return tip;\n};\n","import { insertAfter } from \"../helpers/elements\";\nvar nanobus = require('nanobus');\nexport default class Actions {\n    constructor(element) {\n        this.container = element;\n        this.events = nanobus();\n        this.init();\n    }\n    init() {\n        this.container.addEventListener('update', () => {\n            this.refresh();\n        });\n        let reference = document.querySelectorAll('.tablenav.top .actions');\n        if (reference && reference.length) {\n            insertAfter(this.container, reference[reference.length - 1]);\n            this.container.classList.add('-init');\n            this.container.dispatchEvent(new CustomEvent('update'));\n        }\n    }\n    refresh() {\n        this.container.querySelectorAll('.ac-table-actions-buttons > a').forEach((element) => {\n            element.classList.remove('last');\n        });\n        let buttons = [].slice.call(this.container.querySelectorAll('.ac-table-actions-buttons > a'), 0);\n        buttons.reverse();\n        for (var i = 0; i < buttons.length; i++) {\n            if (buttons[i].offsetParent) {\n                buttons[i].classList.add('last');\n                break;\n            }\n        }\n    }\n}\n","import Nanobus from \"nanobus\";\nexport default class Cell {\n    constructor(id, name, el) {\n        this.object_id = id;\n        this.column_name = name;\n        this.original_value = el.innerHTML;\n        this.el = el;\n        this.services = {};\n        this.events = new Nanobus();\n    }\n    getOriginalValue() {\n        return this.original_value;\n    }\n    getObjectID() {\n        return this.object_id;\n    }\n    getName() {\n        return this.column_name;\n    }\n    getElement() {\n        return this.el;\n    }\n    setElement(element) {\n        this.el = element;\n    }\n    getRow() {\n        return this.el.parentElement;\n    }\n    getSettings() {\n        return AC_SERVICES.getService('Table').Columns.get(this.getName());\n    }\n    hasChanged(content) {\n        return this.original_value !== content;\n    }\n    setValue(value) {\n        let rowActions = this.el.querySelector('.row-actions');\n        this.original_value = value;\n        this.el.innerHTML = value;\n        if (rowActions) {\n            this.el.append(rowActions);\n        }\n        this.original_value = value;\n        this.events.emit('setValue', this);\n        return this;\n    }\n    setService(name, service) {\n        this.services[name] = service;\n    }\n    getService(name) {\n        return this.hasService(name) ? this.services[name] : null;\n    }\n    hasService(name) {\n        return this.services.hasOwnProperty(name);\n    }\n}\n","export default class Cells {\n    constructor() {\n        this.cells = {};\n    }\n    add(id, cell) {\n        if (!this.cells.hasOwnProperty(id)) {\n            this.cells[id] = {};\n        }\n        this.cells[id][cell.getName()] = cell;\n    }\n    getByID(id) {\n        let result = [];\n        if (!this.cells.hasOwnProperty(id.toString())) {\n            return result;\n        }\n        let cells = this.cells[id.toString()];\n        Object.keys(cells).forEach(name => result.push(cells[name]));\n        return result;\n    }\n    getAll() {\n        let results = [];\n        Object.keys(this.cells).forEach(id => {\n            let cells = this.cells[id];\n            Object.keys(cells).forEach(name => results.push(cells[name]));\n        });\n        return results;\n    }\n    getByName(name) {\n        let results = [];\n        Object.keys(this.cells).forEach(id => {\n            let cells = this.cells[id];\n            Object.keys(cells).forEach(column_name => {\n                if (name === column_name) {\n                    results.push(cells[column_name]);\n                }\n            });\n        });\n        return results;\n    }\n    get(id, name) {\n        return this.cells.hasOwnProperty(id.toString()) ? this.cells[id][name] : null;\n    }\n}\n","export default class Columns {\n    constructor(table) {\n        this.table = table;\n        this.columns = {};\n        this.init();\n    }\n    init() {\n        let self = this;\n        let thead = this.table.querySelector('thead');\n        let headers = thead.querySelectorAll('th');\n        for (let i = 0; i < headers.length; i++) {\n            let headerName = headers[i].id;\n            self.columns[headers[i].id] = new ColumnTableSettings(headerName, AC.column_types[headerName], this.sanitizeLabel(headers[i]));\n        }\n    }\n    getColumns() {\n        return this.columns;\n    }\n    getColumnsMap() {\n        let map = new Map();\n        let columns = this.getColumns();\n        Object.keys(columns).forEach((k) => {\n            map.set(k, columns[k]);\n        });\n        return map;\n    }\n    getColumnNames() {\n        return Object.keys(this.columns);\n    }\n    get(column_name) {\n        return this.columns.hasOwnProperty(column_name) ? this.columns[column_name] : null;\n    }\n    sanitizeLabel(header) {\n        let link = header.querySelector('a');\n        let label = header.innerHTML;\n        // If it contains a link, we presume that it is because of sorting\n        if (link) {\n            let elements = link.getElementsByTagName('span');\n            if (elements.length > 0) {\n                label = elements[0].innerHTML;\n            }\n        }\n        return label;\n    }\n}\nexport class ColumnTableSettings {\n    constructor(name, type, label) {\n        this.name = name;\n        this.type = type;\n        this.label = label;\n        this.services = {};\n    }\n    setService(name, service) {\n        this.services[name] = service;\n    }\n    getService(name) {\n        return this.hasService(name) ? this.services[name] : null;\n    }\n    hasService(name) {\n        return this.services.hasOwnProperty(name);\n    }\n}\n","import { Tooltip } from \"../plugin/tooltip\";\nexport const init_actions_tooltips = () => {\n    document.querySelectorAll('.cpac_use_icons').forEach((el) => {\n        el.parentElement.querySelectorAll('.row-actions a').forEach((el) => {\n            new Tooltip(el, el.innerText);\n        });\n    });\n};\n","export default class RowSelection {\n    constructor(table) {\n        this.Table = table;\n    }\n    getIDs() {\n        let ids = [];\n        let checked = this.Table.getElement().querySelectorAll('tbody th.check-column input[type=checkbox]:checked');\n        if (checked.length === 0) {\n            return ids;\n        }\n        for (let i = 0; i < checked.length; i++) {\n            ids.push(parseInt(checked[i].value));\n        }\n        return ids;\n    }\n    /**\n     * Get selected cells for specific column\n     */\n    getSelectedCells(name) {\n        let ids = this.getIDs();\n        if (ids.length === 0) {\n            return null;\n        }\n        let cells = [];\n        ids.forEach((id) => {\n            let cell = this.Table.Cells.get(id, name);\n            if (cell) {\n                cells.push(cell);\n            }\n        });\n        return cells;\n    }\n    getCount() {\n        return this.getIDs().length;\n    }\n    isAllSelected() {\n        return !!this.Table.getElement().querySelector('thead #cb input:checked');\n    }\n}\n","import AcHtmlElement from \"../helpers/html-element\";\nexport default class ScreenOptionsColumns {\n    constructor(columns) {\n        this.columns = columns;\n        columns.getColumnNames().forEach((column_name) => {\n            let column = columns.get(column_name);\n            let input = ScreenOptionsColumns.getInputByName(column.name);\n            if (input && input.parentElement.textContent.length === 0) {\n                input.parentElement.appendChild(AcHtmlElement.create('span').addHtml(column.label).element);\n            }\n        });\n    }\n    static getInputByName(name) {\n        let input = document.querySelector(`input[name='${name}-hide']`);\n        return input ? input : false;\n    }\n}\n","import Actions from \"./actions\";\nimport Cells from \"./cells\";\nimport Columns from \"./columns\";\nimport Cell from \"./cell\";\nimport RowSelection from \"./row-selection\";\nimport { getIdFromTableRow } from \"../helpers/table\";\nimport { EventConstants } from \"../constants\";\nimport ServiceContainer from \"../modules/service-container\";\nexport default class Table {\n    constructor(el, services) {\n        this.el = el;\n        this.AcServices = services;\n        this.Services = new ServiceContainer();\n        this.Columns = new Columns(el);\n        this.Cells = new Cells();\n        this.Actions = document.getElementById('ac-table-actions') ? new Actions(document.getElementById('ac-table-actions')) : null;\n        this.Selection = new RowSelection(this);\n    }\n    getElement() {\n        return this.el;\n    }\n    getIdsFromTable() {\n        let result = [];\n        this.el.getElementsByTagName('tbody')[0].querySelectorAll('tr').forEach(row => {\n            result.push(getIdFromTableRow(row));\n        });\n        return result;\n    }\n    init() {\n        this.initTable();\n        this.addCellClasses();\n        document.dispatchEvent(new CustomEvent('AC_Table_Ready', { detail: { table: this } }));\n        this.AcServices.emitEvent(EventConstants.TABLE.READY, { table: this });\n        return this;\n    }\n    addCellClasses() {\n        this.Columns.getColumnNames().forEach((name) => {\n            let type = this.Columns.get(name).type;\n            let cells = this.Cells.getByName(name);\n            cells.forEach((cell) => {\n                cell.getElement().classList.add(type);\n            });\n        });\n    }\n    initTable() {\n        this.el.getElementsByTagName('tbody')[0].querySelectorAll('tr').forEach(row => {\n            this.updateRow(row);\n        });\n    }\n    updateRow(row) {\n        let id = getIdFromTableRow(row);\n        row.dataset.id = id.toString();\n        this.setCellsForRow(row);\n    }\n    setCellsForRow(row) {\n        let id = getIdFromTableRow(row);\n        this.Columns.getColumnNames().forEach((name) => {\n            let selector = name.replace(/\\./g, '\\\\.');\n            let td = row.querySelector(\"td.column-\" + selector);\n            if (td) {\n                let cell = new Cell(id, name, td);\n                this.Cells.add(id, cell);\n            }\n        });\n    }\n}\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Table from \"./table/table\";\nimport Tooltip from \"./modules/tooltips\";\nimport ScreenOptionsColumns from \"./table/screen-options-columns\";\nimport ToggleBoxLink from \"./modules/toggle-box-link\";\n// @ts-ignore\nimport $ from 'jquery';\nimport { auto_init_show_more } from \"./plugin/show-more\";\nimport { init_actions_tooltips } from \"./table/functions\";\nimport { EventConstants } from \"./constants\";\nimport { getIdFromTableRow, resolveTableBySelector } from \"./helpers/table\";\nimport { initAcServices } from \"./helpers/admin-columns\";\nimport Modals from \"./modules/modals\";\nimport { initPointers } from \"./modules/ac-pointer\";\nlet AC_SERVICES = initAcServices();\nAC_SERVICES.registerService('Modals', new Modals());\ndocument.addEventListener('DOMContentLoaded', () => {\n    let table = resolveTableBySelector(AC.table_id);\n    initPointers();\n    if (table) {\n        const TableModule = new Table(table, AC_SERVICES).init();\n        AC_SERVICES.registerService('Table', TableModule);\n        AC_SERVICES.registerService('ScreenOptionsColumns', new ScreenOptionsColumns(TableModule.Columns));\n    }\n    AC_SERVICES.registerService('Tooltips', new Tooltip());\n    document.querySelectorAll('.ac-toggle-box-link').forEach(el => {\n        new ToggleBoxLink(el);\n    });\n    $('.wp-list-table').on('updated', 'tr', function () {\n        AC_SERVICES.getService('Table').addCellClasses();\n        auto_init_show_more();\n    });\n});\nAC_SERVICES.addListener(EventConstants.TABLE.READY, (event) => {\n    auto_init_show_more();\n    init_actions_tooltips();\n    let observer = new MutationObserver(mutations => {\n        mutations.forEach((mutation) => {\n            mutation.addedNodes.forEach((node) => {\n                if (node.tagName === 'TR' && node.classList.contains('iedit')) {\n                    $(node).trigger('updated', { id: getIdFromTableRow(node), row: node });\n                }\n            });\n        });\n    });\n    observer.observe(event.table.getElement(), { childList: true, subtree: true });\n    event.table.Cells.getAll().forEach(cell => {\n        cell.events.addListener('setValue', () => {\n            auto_init_show_more();\n        });\n    });\n});\n"],"names":[],"sourceRoot":""}